LABTITLE=: 'ODBC: Binary large objects - BLOBS'
LABAUTHOR=: 0 : 0
John D. Baker
bakerjd@kos.net
)
LABCOMMENTS=: 'This lab illustrates a technique for inserting binary large objects into ODBC databases.'
LABDEPENDS=: 'data/odbc'

NB. =========================================================
Lab Section BLOBS and ODBC
Many databases that can be accessed by ODBC support long binary and long character datatypes.  Long types are used to store images, arbitrary files and other large chunks of data.  In this lab we will show a simple method that can be used to store and retrieve J nouns as SQL blobs.
)

NB. =========================================================
Lab Section
The method is simple but how well it works is entirely dependent of the underlying ODBC driver and host database.
This lab uses the Sqlite driver.

To get started define some simple utilities.
)
NB. encode J nouns as hexadecimal character lists
inhex=: ,@:(toupper@:(_2&({.!.'0'))@:hfd"0@:(a.&i.)@:(3!:1))

NB. quote J char lists
quote =: ''''&,@(,&'''')@(#~ >:@(=&''''))

NB. =========================================================
Lab Section Why use hexadecimal?
(inhex) converts arbitrary J nouns to hexadecimal lists. The hexadecimal list representation is used because it is required by Sqlite insert statement syntax.
)
NB. =========================================================
Lab Section Load ODBC
)
NB. load and initialize the ODBC interface script
load 'dd'

NB. =========================================================
Lab Section
NOTE: to run this lab you must register the following data source with the ODBC control panel applet. For Linux/Mac, create the file $HOME/.odbc.ini and add the following lines into it, (change the file path of database)

 [jblob]
 Description=jblob db
 Driver=SQLite3
 Database=/home/bakerjd/jblob.db

The next section checks it is correctly registered.

DSN     DRIVER and DATA LOCATION
-----------------------------------------

Windows/Linux/Mac:
 jblob   Sqlite file  ~/jblob.db
)
PREPARE
(jpath '~/jblob.db') fcopynew (jpath '~addons/labs/labs/examples/data/jblob.db')
PREPARE
NB. check ODBC dsn registration - result should be 1
(<'jblob') e. {."1 ddsrc 0

NB. =========================================================
Lab Section Putting blobs
Connect to the J blob database.
)
ch =: ddcon 'dsn=jblob'

NB. =========================================================
Lab Section
The first step is inserting blobs.  This step defines a simple verb that shows how this can be done.
)
putblob =: 4 : 0
sql =. 'insert into blobs (jjname,jjvalue) values ('
sql =. sql,(quote x),',x',(quote inhex ".x),')'
sql ddsql y
)

NB. =========================================================
Lab Section
Define and insert some blobs.
)
b1 =: i. 2 3 4
b2 =: ;:'go ahead store me as a blob'
b3 =: ?1000$100
b4 =: 2x^1000

(;:'b1 b2 b3 b4') putblob&.> ch

NB. =========================================================
Lab Section
List the names in the blob-base
)
sh=: 'select jjname from blobs' ddsel ch
ddfet sh,_1

NB. =========================================================
Lab Section Getting blobs
This step defines a (getblob) verb.
)
getblob =: 4 : 0
sql=.'select jjvalue from blobs where jjname = '
sql=.sql,quote x
dat=.ddfet(sql ddsel y),_1
3!:2 ,>dat
)

NB. =========================================================
Lab Section
Retrieve some blobs.
)
b1 -: 'b1' getblob ch
b2 -: 'b2' getblob ch
b3 -: 'b3' getblob ch
b4 -: 'b4' getblob ch

NB. =========================================================
Lab Section Deleting blobs
Clear the blobs.
)
NB. empty test blob table
'delete from blobs' ddsql ch

NB. how many deleted
ddcnt ch

NB. =========================================================
Lab Section
So much for blobs!
)

NB. disconnect datasource
dddis ch
